import 'package:flutter/material.dart';
import 'package:parkingapp_user/repositories/person_repository.dart';
import 'package:parkingapp_user/views/account_view.dart';
import 'package:parkingapp_user/views/vehicles_view.dart';
import 'package:parkingapp_user/views/parkings_view.dart';
import 'package:shared/models/person.dart';

class MainView extends StatefulWidget {
  const MainView({super.key});

  @override
  State<MainView> createState() => _MainViewState();
}

class _MainViewState extends State<MainView> {

  final ValueNotifier<Future> _loginFuture = ValueNotifier(Future.value());
  final loginFormKey = GlobalKey<FormState>();
  bool isLoggedIn = false;

  late String? name;
  late String? personId;
  late String? email;
  late String? pwd;
  late bool loginModeCreate = false;
  late bool loginError = false;

  late Person? person;

  Future<bool> loginUser () async {
    bool loginSuccess = false;
    loginError = false;
    try {
      debugPrint("Email: $email");
      person = await PersonRepository().getByEmail(email!);
      debugPrint(person!.email);
      if(person != null) {
        loginSuccess = true;
      }
    } catch(err) {
      loginError = true;
    }
    return loginSuccess;
  }

  Future<Person?> createUser () async {
    //Person? person;
    loginError = false;
    try {
      //debugPrint("Email: $loginEmail");
      var newPerson = Person(personId: personId!, name: name!, email: email);
      person = await PersonRepository().add(newPerson);
    } catch(err) {
      debugPrint(err.toString());
      loginError = true;
    }
    return person;
  }


  get destinations => const <NavigationDestination>[
    NavigationDestination(icon: Icon(Icons.local_parking), label:"Parkeringar"),
    NavigationDestination(icon: Icon(Icons.fire_truck), label:"Fordon"),
    NavigationDestination(icon: Icon(Icons.person), label:"Konto"),
    NavigationDestination(icon: Icon(Icons.logout), label: "Logga ut")
  ];

  int _selectedIndex = 0;

  Widget gotoView(int index) {
    if(index == 0) {
      return ParkingsView(user: person!);
    } else if(index == 1) {
      return VehiclesView(user: person!);
    } else if(index == 2) {
      return AccountView(user: person!);
    }
    setState(() {
      isLoggedIn = false;
    });
    return const SizedBox.shrink();
  }

  onSelectedIndex(int index) {
    if(index == 3) {
      setState(() {
        isLoggedIn = false;
      });
    } else {
      setState(() {
        _selectedIndex = index;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: 
        isLoggedIn 
        ? Container(
          color: Colors.white,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Padding(
                padding: EdgeInsets.all(16),
                child: Text(
                  "Parkeringsappen",
                  style: TextStyle(
                    fontSize: 21,
                    fontWeight: FontWeight.bold
                  )
                ),
              ),
              Expanded(
                child: gotoView(_selectedIndex)
              ),
              NavigationBar(
                destinations: destinations, 
                selectedIndex: _selectedIndex,
                onDestinationSelected: (int index) {
                 onSelectedIndex(index);
                },
              ),
            ],
          ),
        )
        : loginForm(context)
      )
    );
  }


}